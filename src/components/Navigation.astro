---
import { Icon } from "@astrojs/starlight/components";
import "../tailwind.css";

type IconName = "rss" | "star" | "open-book" | "rocket";

type Link = {
  name: string;
  href: `/${string}` | `https://${string}`;
  icon?: IconName;
};

const links: Array<Link> = [
  { name: "News", href: "/news/", icon: "rss" },
  { name: "Team", href: "/team", icon: "star" },
  { name: "TrueTech", href: "/truetech/", icon: "open-book" },
  { name: "GamingForge", href: "/gamingforge", icon: "rocket" },
  { name: "LifeForge", href: "/lifeforge", icon: "open-book" },
];

const { pathname } = Astro.url;
---

<div class="flex flex-row gap-5 ml-8 items-center justify-center">
  {
    links.map((link) => {
      // Remove trailing slashes for reliable matching
      const normalizedHref = link.href.replace(/\/$/, "");
      const normalizedPath = pathname.replace(/\/$/, "");

      // Active if the current URL starts with the linkâ€™s base path
      const isActive = normalizedPath.startsWith(normalizedHref);

      return (
        <a
          class={`link-no-deco flex flex-row items-center gap-1 border-tc-primary transition-all
            ${isActive ? "scale-110 border-b-4" : "hover:scale-110 hover:border-b-4"}`}
          href={link.href}
          data-astro-prefetch="load"
        >
          <p class="font-bold text-lg max-lg:text-xs max-md:text-xs">
            {link.name}
          </p>
          {link.icon && (
            <Icon
              class="w-5 h-5 max-md:hidden max-lg:hidden text-[var(--sl-color-gray-2)]"
              name={link.icon}
            />
          )}
        </a>
      );
    })
  }
</div>
